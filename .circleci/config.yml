version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@2.4.1
commands:
  setup-mpi-environment:
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
      - restore_cache:
          keys:
            - v1-mpi-venv-{{ checksum ".circleci/requirements.txt" }}-{{ checksum ".circleci/requirements.txt" }}-{{ checksum "constraints.txt" }}
      - run:
          name: Install Dependencies
          command: |
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y update
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y install software-properties-common libopenmpi3 libopenmpi-dev
            python3 -m venv venv
            source venv/bin/activate
            pip3 install --upgrade pip setuptools wheel
            pip3 install -r .circleci/requirements.txt -r .circleci/mpi_requirements.txt -c constraints.txt
            pip3 install external/gt4py -c constraints.txt
            pip3 install ./pace-util ./fv3core ./fv3gfs-physics ./stencils ./dsl ./driver -c constraints.txt
      - save_cache:
          key: v1-mpi-venv-{{ checksum ".circleci/requirements.txt" }}-{{ checksum ".circleci/requirements.txt" }}-{{ checksum "constraints.txt" }}
          paths:
            - venv
            - /root/.cache/pip
  # setup-environment:
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install Submodules
  #         command: git submodule update --init
  #     - restore_cache:
  #         keys:
  #           - v1-venv-{{ checksum "requirements.txt" }}-{{ checksum "constraints.txt" }}
  #     - run:
  #         name: Install Dependencies
  #         command: |
  #           python3 -m venv venv
  #           source venv/bin/activate
  #           pip3 install --upgrade pip setuptools wheel
  #           pip3 install -r .circleci/requirements.txt -c constraints.txt
  #           pip3 install external/gt4py -c constraints.txt
  #           pip3 install ./pace-util ./fv3core ./fv3gfs-physics ./stencils ./dsl ./driver -c constraints.txt
  #     - save_cache:
  #         key: v1-venv-{{ checksum "requirements.txt" }}-{{ checksum "constraints.txt" }}
  #         paths:
  #           - venv
  #           - /root/.cache/pip
  download-regression-data:
    parameters:
      case:
        type: string
      version:
        type: string
      module:
        type: string
    steps:
      - restore_cache:
          keys:
            - v1-regression-data-<<parameters.version>>-<<parameters.case>>-<<parameters.module>>
      - run: mkdir -p test_data
      - run: gsutil -m rsync -r gs://vcm-fv3gfs-serialized-regression-data/<<parameters.version>>/<<parameters.case>>/<<parameters.module>> test_data/
      - run: ls test_data
      - save_cache:
          key: v1-regression-data-<<parameters.version>>-<<parameters.case>>-<<parameters.module>>
          paths:
            - test_data
  unpack-regression-data:
    steps:
      - run: tar -xf test_data/dat_files.tar.gz

jobs:

  lint:
    docker:
    - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-{{ checksum ".pre-commit-config.yaml" }}-{{ checksum "constraints.txt" }}
      - run:
          name: run linting
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install pre-commit -c constraints.txt
            pre-commit run --all-files
      - save_cache:
          key: v3-{{ checksum ".pre-commit-config.yaml" }}-{{ checksum "constraints.txt" }}
          paths:
            - ~/.cache/pre-commit
            - venv

  regression:
    docker:
    - image: cimg/python:3.8
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - gcp-cli/install:
        version: 323.0.0
      - run:
          name: gcloud auth
          command: |
            echo $ENCODED_GCR_KEY
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
      - setup-mpi-environment
      # - download-regression-data:
      #     case: c12_6ranks_baroclinic
      #     version: 8.1.0
      #     module: dycore
      # - unpack-regression-data
      - run:
          name: save gt4py_version.txt
          run: git submodule status external/gt4py | awk '{print $1;}' > gt4py_version.txt
      - restore_cache:
          keys:
            - v1-{{ checksum "gt4py_version.txt" }}
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            CONTAINER_CMD="" FV3_PATH="$(pwd)/fv3core" make savepoint_tests savepoint_tests_mpi
      - save_cache:
          key: v1-{{ checksum "gt4py_version.txt" }}
          paths:
            - .gt_cache

  test_util:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
      - restore_cache:
          keys:
            - v2-{{ checksum "pace-util/tox.ini" }}-{{ checksum "constraints.txt" }}-{{ checksum "pace-util/setup.py" }}
      - run:
          name: install tox and MPI
          command: |
            if [ $(python changed_from_main.py pace-util) != false ]; then
              sudo apt-get update
              sudo apt-get install libopenmpi3 libopenmpi-dev
              pip3 install --upgrade setuptools wheel
              python3 -m venv pace-util/venv
              . pace-util/venv/bin/activate
              pip3 install tox -c constraints.txt
            fi
      - run:
          name: run tests
          command: |
            if [ $(python changed_from_main.py pace-util) != false ]; then
              cd pace-util
              . venv/bin/activate
              tox --recreate -e test -e test_no_extras
            fi
      - save_cache:
          key: v2-{{ checksum "pace-util/tox.ini" }}-{{ checksum "constraints.txt" }}
          paths:
            - pace-util/.tox
            - pace-util/venv

  test_driver:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
      - restore_cache:
          keys:
            - v3-driver-{{ checksum "driver/requirements.txt" }}-{{ checksum "constraints.txt" }}-{{ checksum "driver/setup.py" }}
      - run:
          name: install packages
          command: |
            if [ $(python changed_from_main.py driver) != false ]; then
              sudo apt-get update
              sudo apt-get install libopenmpi3 libopenmpi-dev
              cd driver && ./examples/create_venv.sh
            fi
      - run:
          name: run tests
          command: |
            if [ $(python changed_from_main.py driver) != false ]; then
              cd driver
              . venv/bin/activate
              make test
              MPIRUN_CALL="mpirun -n 6 --mca btl_vader_single_copy_mechanism none" make test_mpi
            fi
      - save_cache:
          key: v3-driver-{{ checksum "driver/requirements.txt" }}-{{ checksum "constraints.txt" }}-{{ checksum "driver/setup.py" }}
          paths:
            - driver/venv
            - /root/.cache/pip

  test_fv3core:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
      - restore_cache:
          keys:
            - v3-{{ checksum "fv3core/tox.ini" }}-{{ checksum "constraints.txt" }}
      - run:
          name: install tox
          command: |
            if [ $(python changed_from_main.py fv3core) != false ]; then
              pip3 install --upgrade setuptools wheel virtualenv
              virtualenv fv3core/venv
              . fv3core/venv/bin/activate
              pip3 install tox -c constraints.txt
            fi
      - run:
          name: run tests
          command: |
            if [ $(python changed_from_main.py fv3core) != false ]; then
              cd fv3core
              . venv/bin/activate
              tox --recreate -e test
            fi
      - save_cache:
          key: v3-{{ checksum "fv3core/tox.ini" }}-{{ checksum "constraints.txt" }}
          paths:
            - fv3core/.tox
            - fv3core/venv

workflows:
  version: 2
  tagged-build:
    jobs:
      - lint:
          filters:
            tags:
              only: /^v.*/
      - regression:
          context:
            - GCLOUD_ENCODED_KEY
          filters:
            tags:
              only: /^v.*/
      - test_util:
          filters:
            tags:
              only: /^v.*/
      - test_fv3core:
          filters:
            tags:
              only: /^v.*/
      - test_driver:
          filters:
            tags:
              only: /^v.*/
