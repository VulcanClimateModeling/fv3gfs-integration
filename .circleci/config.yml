version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@2.4.1
  gcp-gcr: circleci/gcp-gcr@0.15.0

commands:
  setup_environment_mpi:
    description: "Setup environment with MPI"
    steps:
      - run:
          name: setup mpi
          command: |
            sudo apt-get update && sudo apt-get install -y make \
              software-properties-common \
              libopenmpi3 \
              libopenmpi-dev \
              libboost-all-dev \
              python3 \
              python3-pip \
      - restore_cache:
          keys:
            - v1-venv-{{ checksum "requirements_dev.txt" }}-{{ checksum "constraints.txt" }}
      - run:
          name: setup python environment
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install --upgrade setuptools wheel
            pip3 install -r requirements_dev.txt -c constraints.txt
            python3 -m gt4py.gt_src_manager install
      - save_cache:
          key: v1-venv-{{ checksum "requirements_dev.txt" }}-{{ checksum "constraints.txt" }}
          paths:
            - venv
            - /root/.cache/pip

jobs:

  lint:
    docker:
    - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-{{ checksum ".pre-commit-config.yaml" }}-{{ checksum "constraints.txt" }}
      - run:
          name: run linting
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install pre-commit -c constraints.txt
            pre-commit run --all-files
      - save_cache:
          key: v3-{{ checksum ".pre-commit-config.yaml" }}-{{ checksum "constraints.txt" }}
          paths:
            - ~/.cache/pre-commit
            - venv

  savepoints:
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    parameters:
      backend:
        description: "gt4py backend"
        default: "numpy"
        type: enum
        enum: ["numpy", "gt:cpu_ifirst"]
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - gcp-cli/install:
        version: 323.0.0
      - run:
          name: gcloud auth
          command: |
            echo $ENCODED_GCR_KEY
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth configure-docker
      - checkout
      - run:
          name: Update Submodules
          command: git submodule update --init
      - run:
          name: save gt4py_version.txt
          command: git submodule status external/gt4py | awk '{print $1;}' > gt4py_version.txt
      - restore_cache:
          keys:
            - v3-gt_cache-serial-<<parameters.backend>>-{{ checksum "gt4py_version.txt" }}
      - restore_cache:
          keys:
            - v1-savepoints-{{ checksum "Makefile.data_download" }}
      - run:
          name: build image
          command: |
            BUILD_ARGS="--progress=plain" DEV=n make build
      - run:
          name: run tests
          command: |
            TEST_ARGS="--backend=<<parameters.backend>> -v -s" DEV=y make savepoint_tests
          no_output_timeout: 3h
      - save_cache:
          key: v3-gt_cache-serial-<<parameters.backend>>-{{ checksum "gt4py_version.txt" }}
          paths:
            - .gt_cache
            - .gt_cache_000000
      - save_cache:
          key: v1-savepoints-{{ checksum "Makefile.data_download" }}
          paths:
            - test_data

  savepoints_mpi:
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    parameters:
      backend:
        description: "gt4py backend"
        default: "numpy"
        type: enum
        enum: ["numpy", "gt:cpu_ifirst"]
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - gcp-cli/install:
        version: 323.0.0
      - run:
          name: gcloud auth
          command: |
            echo $ENCODED_GCR_KEY
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth configure-docker
      - checkout
      - run:
          name: Update Submodules
          command: git submodule update --init
      - run:
          name: save gt4py_version.txt
          command: git submodule status external/gt4py | awk '{print $1;}' > gt4py_version.txt
      - restore_cache:
          keys:
            - v2-gt_cache-<<parameters.backend>>-{{ checksum "gt4py_version.txt" }}
      - restore_cache:
          keys:
            - v1-savepoints-{{ checksum "Makefile.data_download" }}
      - run:
          name: build image
          command: |
            BUILD_ARGS="--progress=plain" DEV=n make build
      - run:
          name: run tests
          command: |
            TEST_ARGS="--backend=<<parameters.backend>> -v -s" DEV=y make savepoint_tests_mpi
          no_output_timeout: 3h
      - save_cache:
          key: v2-gt_cache-<<parameters.backend>>-{{ checksum "gt4py_version.txt" }}
          paths:
            - .gt_cache
            - .gt_cache_000000
            - .gt_cache_000001
            - .gt_cache_000002
            - .gt_cache_000003
            - .gt_cache_000004
            - .gt_cache_000005
      - save_cache:
          key: v1-savepoints-{{ checksum "Makefile.data_download" }}
          paths:
            - test_data

  savepoints_mpi_54rank:
    machine:
      image: ubuntu-2004:202111-02
      resource_class: xlarge
    parameters:
      backend:
        description: "gt4py backend"
        default: "numpy"
        type: enum
        enum: ["numpy", "gt:cpu_ifirst"]
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - run: |
          sudo apt-get update && sudo apt-get install -y make \
            software-properties-common \
            libopenmpi3 \
            libopenmpi-dev \
            libboost-all-dev \
            python3 \
            python3-pip \
      - gcp-cli/install:
        version: 323.0.0
      - run:
          name: gcloud auth
          command: |
            echo $ENCODED_GCR_KEY
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth configure-docker
      - checkout
      - run:
          name: Update Submodules
          command: git submodule update --init
      - run:
          name: save gt4py_version.txt
          command: git submodule status external/gt4py | awk '{print $1;}' > gt4py_version.txt
      - restore_cache:
          keys:
            - v3-gt_cache_54ranks-<<parameters.backend>>-{{ checksum "gt4py_version.txt" }}
      - restore_cache:
          keys:
            - v2-savepoints-c12_54ranks_standard-{{ checksum "Makefile.data_download" }}
      - restore_cache:
          keys:
            - v4-pip_cache-{{ checksum "requirements_dev.txt" }}-{{ checksum "constraints.txt" }}
      - run:
          name: set up environment
          command: |
            pip3 install --upgrade setuptools wheel
            pip3 install -r requirements_dev.txt -c constraints.txt
            python3 -m gt4py.gt_src_manager install
      - save_cache:
          key: v4-pip_cache-{{ checksum "requirements_dev.txt" }}-{{ checksum "constraints.txt" }}
          paths:
            - /home/circleci/.cache/pip
      - run:
          name: run tests
          command: |
            GT_CACHE_ROOT=".gt_cache" TEST_ARGS="--backend=<<parameters.backend>> -v -s" CONTAINER_CMD="" NUM_RANKS=54 EXPERIMENT="c12_54ranks_standard" FV3_PATH=$(pwd)/fv3core make savepoint_tests_mpi
          no_output_timeout: 3h
      - save_cache:
          key: v3-gt_cache_54ranks-<<parameters.backend>>-{{ checksum "gt4py_version.txt" }}
          paths:
            - .gt_cache
      - save_cache:
          key: v2-savepoints-c12_54ranks_standard-{{ checksum "Makefile.data_download" }}
          paths:
            - test_data

  test_util:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
      - restore_cache:
          keys:
            - v2-{{ checksum "util/tox.ini" }}-{{ checksum "constraints.txt" }}-{{ checksum "util/setup.py" }}
      - run:
          name: install tox and MPI
          command: |
            if [ $(python changed_from_main.py util) != false ]; then
              sudo apt-get update
              sudo apt-get install libopenmpi3 libopenmpi-dev
              pip3 install --upgrade setuptools wheel
              python3 -m venv util/venv
              . util/venv/bin/activate
              pip3 install tox -c constraints.txt
            fi
      - run:
          name: run tests
          command: |
            if [ $(python changed_from_main.py util) != false ]; then
              cd util
              . venv/bin/activate
              tox --recreate -e test -e test_no_extras
            fi
      - save_cache:
          key: v2-{{ checksum "util/tox.ini" }}-{{ checksum "constraints.txt" }}
          paths:
            - util/.tox
            - util/venv

  test_driver:
    docker:
      - image: cimg/python:3.8
    resource_class: large
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
      - restore_cache:
          keys:
            - v3-driver-{{ checksum "requirements_dev.txt" }}-{{ checksum "constraints.txt" }}-{{ checksum "driver/setup.py" }}
      - run:
          name: install packages
          command: |
            if [ $(python changed_from_main.py driver) != false ]; then
              sudo apt-get update
              sudo apt-get install libopenmpi3 libopenmpi-dev
              cd driver && ./examples/create_venv.sh
            fi
      - save_cache:
          key: v3-driver-{{ checksum "requirements_dev.txt" }}-{{ checksum "constraints.txt" }}-{{ checksum "driver/setup.py" }}
          paths:
            - driver/venv
            - /root/.cache/pip
      - run:
          name: run tests
          command: |
            if [ $(python changed_from_main.py driver) != false ]; then
              cd driver
              . venv/bin/activate
              MPIRUN_CALL="mpirun -n 6 --mca btl_vader_single_copy_mechanism none" make test_mpi
            fi

  test_main:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
      - setup_environment_mpi
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest tests/main

  test_mpi_54rank:
    docker:
      - image: cimg/python:3.8
    resource_class: large
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
      - setup_environment_mpi
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            mpirun -n 54 --oversubscribe --mca btl_vader_single_copy_mechanism none python3 -m mpi4py -m pytest tests/mpi_54rank

  test_notebooks:
    docker:
      - image: gcr.io/vcm-ml/pace_notebook_examples
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Test grid generation
          command: jupyter run examples/notebooks/grid_generation.ipynb
      - run:
          name: Test initial condition definition
          command: jupyter run examples/notebooks/initial_condition_definition.ipynb
      - run:
          name: Test stencil definition
          command: jupyter run examples/notebooks/stencil_definition.ipynb
      - run:
          name: Test tracer advection
          command: jupyter run examples/notebooks/tracer_advection.ipynb

workflows:
  version: 2
  tagged-build:
    jobs:
      - lint:
          filters:
            tags:
              only: /^v.*/
      - savepoints:
          matrix:
            parameters:
              backend:
                - numpy
                - gt:cpu_ifirst
          context:
            - GCLOUD_ENCODED_KEY
          filters:
            tags:
              only: /^v.*/
      - savepoints_mpi:
          matrix:
            parameters:
              backend:
                - numpy
                - gt:cpu_ifirst
          context:
            - GCLOUD_ENCODED_KEY
          filters:
            tags:
              only: /^v.*/
      - savepoints_mpi_54rank:
          matrix:
            parameters:
              backend:
                - numpy
          context:
            - GCLOUD_ENCODED_KEY
          filters:
            tags:
              only: /^v.*/
      - test_util:
          filters:
            tags:
              only: /^v.*/
      - test_main:
          filters:
            tags:
              only: /^v.*/
      - test_mpi_54rank:
          filters:
            tags:
              only: /^v.*/
      - test_driver:
          filters:
            tags:
              only: /^v.*/
      - test_notebooks:
          filters:
            tags:
              only: /^v.*/
