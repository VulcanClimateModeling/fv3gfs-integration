version: 2.1
commands:
  checkout-all:
    steps:
      - checkout
      - run:
          name: Install Submodules
          command: git submodule update --init
  setup-mpi-environment:
    steps:
      - restore_cache:
          keys:
            - v1-mpi-venv-{{ checksum "requirements.txt" }}-{{ checksum "constraints.txt" }}
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install libopenmpi3 libopenmpi-dev
            python3 -m venv venv
            source venv/bin/activate
            pip3 install --upgrade pip setuptools wheel
            pip3 install -r .circleci/requirements.txt -r .circleci/mpi_requirements.txt -c constraints.txt
            pip3 install external/gt4py -c constraints.txt
            pip3 install pace-util fv3core fv3gfs-physics stencils dsl driver -c constraints.txt
      - save_cache:
          key: v1-venv-{{ checksum "requirements.txt" }}-{{ checksum "constraints.txt" }}
          paths:
            - venv
            - /root/.cache/pip
  setup-environment:
    steps:
      - run:
          name: Install Submodules
          command: git submodule update --init
      - restore_cache:
          keys:
            - v1-venv-{{ checksum "requirements.txt" }}-{{ checksum "constraints.txt" }}
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip3 install --upgrade pip setuptools wheel
            pip3 install -r .circleci/requirements.txt -c constraints.txt
            pip3 install external/gt4py -c constraints.txt
            pip3 install pace-util fv3core fv3gfs-physics stencils dsl driver -c constraints.txt
      - save_cache:
          key: v1-venv-{{ checksum "requirements.txt" }}-{{ checksum "constraints.txt" }}
          paths:
            - venv
            - /root/.cache/pip
  setup-serialbox:
    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install cmake libboost-all-dev
          python3 -m venv venv
          source venv/bin/activate
          git clone https://github.com/GridTools/serialbox.git
          cd serialbox && git checkout e1406251e11c1ebafef5f1a896dde4f0cecc1f01 && cd ..
          pip install -e serialbox/src/serialbox-python -c constraints.txt
  download-regression-data:
    parameters:
      case:
        type: string
      version:
        type: string
      module:
        type: string
    steps:
      - restore_cache:
          keys:
            - v1-regression-data-<<parameters.version>>-<<parameters.case>>-<<parameters.module>>
      - run: mkdir -p test_data
      - run: gsutil -m rsync -r gs://vcm-fv3gfs-serialized-regression-data/<<parameters.version>>/<<parameters.case>>/<<parameters.module>> test_data/
      - run: ls test_data
      - save_cache:
          key: v1-regression-data-<<parameters.version>>-<<parameters.case>>-<<parameters.module>>
          paths:
            - test_data
  unpack-regression-data:
    steps:
      - run: tar -xf test_data/dat_files.tar.gz

jobs:

  lint:
    docker:
    - image: cimg/python:3.8
    steps:
      - checkout-all
      - restore_cache:
          keys:
            - v3-{{ checksum ".pre-commit-config.yaml" }}-{{ checksum "constraints.txt" }}
      - run:
          name: run linting
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install pre-commit -c constraints.txt
            pre-commit run --all-files
      - save_cache:
          key: v3-{{ checksum ".pre-commit-config.yaml" }}-{{ checksum "constraints.txt" }}
          paths:
            - ~/.cache/pre-commit
            - venv

  regression-download:
    docker:
    - image: google/cloud-sdk
    steps:
      - checkout-all
      - download-regression-data:
          case: c12_6ranks_baroclinic
          version: 8.0.3
          module: dycore
      - unpack-regression-data
  
  regression:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout-all
      - setup-serialbox
      - setup-mpi-environment

  test_util:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout-all
      - restore_cache:
          keys:
            - v2-{{ checksum "pace-util/tox.ini" }}-{{ checksum "constraints.txt" }}-{{ checksum "pace-util/setup.py" }}
      - run:
          name: install tox and MPI
          command: |
            if [ $(python changed_from_main.py pace-util) != false ]; then
              sudo apt-get update
              sudo apt-get install libopenmpi3 libopenmpi-dev
              pip3 install --upgrade setuptools wheel
              python3 -m venv pace-util/venv
              . pace-util/venv/bin/activate
              pip3 install tox -c constraints.txt
            fi
      - run:
          name: run tests
          command: |
            if [ $(python changed_from_main.py pace-util) != false ]; then
              cd pace-util
              . venv/bin/activate
              tox --recreate -e test -e test_no_extras
            fi
      - save_cache:
          key: v2-{{ checksum "pace-util/tox.ini" }}-{{ checksum "constraints.txt" }}
          paths:
            - pace-util/.tox
            - pace-util/venv

  test_driver:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout-all
      - restore_cache:
          keys:
            - v3-driver-{{ checksum "driver/requirements.txt" }}-{{ checksum "constraints.txt" }}-{{ checksum "driver/setup.py" }}
      - run:
          name: install packages
          command: |
            if [ $(python changed_from_main.py driver) != false ]; then
              sudo apt-get update
              sudo apt-get install libopenmpi3 libopenmpi-dev
              cd driver && ./examples/create_venv.sh
            fi
      - run:
          name: run tests
          command: |
            if [ $(python changed_from_main.py driver) != false ]; then
              cd driver
              . venv/bin/activate
              make test
              MPIRUN_CALL="mpirun -n 6 --mca btl_vader_single_copy_mechanism none" make test_mpi
            fi
          environment:
            GT_CACHE_ROOT: ~/workspace
            GT_CACHE_DIR_NAME: .gt_cache
      - save_cache:
          key: v3-driver-{{ checksum "driver/requirements.txt" }}-{{ checksum "constraints.txt" }}-{{ checksum "driver/setup.py" }}
          paths:
            - driver/venv
            - /root/.cache/pip

  test_fv3core:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/repo
    steps:
      - checkout-all
      - restore_cache:
          keys:
            - v3-{{ checksum "fv3core/tox.ini" }}-{{ checksum "constraints.txt" }}
      - run:
          name: install tox
          command: |
            if [ $(python changed_from_main.py fv3core) != false ]; then
              pip3 install --upgrade setuptools wheel virtualenv
              virtualenv fv3core/venv
              . fv3core/venv/bin/activate
              pip3 install tox -c constraints.txt
            fi
      - run:
          name: run tests
          command: |
            if [ $(python changed_from_main.py fv3core) != false ]; then
              cd fv3core
              . venv/bin/activate
              tox --recreate -e test
            fi
      - save_cache:
          key: v3-{{ checksum "fv3core/tox.ini" }}-{{ checksum "constraints.txt" }}
          paths:
            - fv3core/.tox
            - fv3core/venv

workflows:
  version: 2
  tagged-build:
    jobs:
      - lint:
          filters:
            tags:
              only: /^v.*/
      - test_util:
          filters:
            tags:
              only: /^v.*/
      - test_fv3core:
          filters:
            tags:
              only: /^v.*/
      - test_driver:
          filters:
            tags:
              only: /^v.*/
